name: Build DarkCore Packages

on:
  workflow_dispatch:

env:
  ARTIFACT_DIR: "artifacts"
  BUILD_DATE: ""

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkg: [ geoupdate, darkcore-xray, darkcore-rules ]
      fail-fast: false

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Build env on ubuntu
        run: |
          wget https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh
          chmod 755 install.sh
          ./install.sh

      - name: Download OpenWrt SDK
        run: |
          wget https://downloads.openwrt.org/releases/24.10.2/targets/rockchip/armv8/openwrt-sdk-24.10.2-rockchip-armv8_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          tar xf openwrt-sdk-*.tar.zst
          rm openwrt-sdk-*.tar.zst
          mv openwrt-sdk-* openwrt-sdk

      - name: Copy ${{ matrix.pkg }}
        run: |
          cp -r ${{ matrix.pkg }} openwrt-sdk/package/${{ matrix.pkg }}

      - name: Install feeds
        run: |
          cd openwrt-sdk
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig

      - name: Build ${{ matrix.pkg }}
        run: |
          cd openwrt-sdk
          make package/${{ matrix.pkg }}/compile V=sc

      - name: Process IPK
        run: |
          mkdir -p "${{ env.ARTIFACT_DIR }}"
          ls -laR openwrt-sdk/bin/packages
          cp -p openwrt-sdk/bin/packages/*/base/${{ matrix.pkg }}*.ipk "${{ env.ARTIFACT_DIR }}"

      - name: Upload IPK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pkg }}-ipk
          path: ${{ env.ARTIFACT_DIR }}/*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Prepare workspace
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.ARTIFACT_DIR }}
          merge-multiple: true

      - name: Setup opkg-utils from Yocto
        run: git clone --depth 1 git://git.yoctoproject.org/opkg-utils || echo "Clone failed"

      - name: Checkout feed branch
        uses: actions/checkout@v4
        with:
          ref: feed
          path: feed

      - name: Setup Usign
        run: |
          git clone https://git.openwrt.org/project/usign.git
          cd usign
          mkdir build
          cd build
          cmake ..
          make
          make install

      - name: Restore usign private key
        env:
          USIGN_SECRET_KEY_B64: ${{ secrets.USIGN_SECRET_KEY_B64 }}
        shell: bash
        run: |
          echo "$USIGN_SECRET_KEY_B64" | base64 -d > key-build.sec
          chmod 600 key-build.sec

      - name: Prepare feed files
        run: |
          rm -rf feed/*.ipk feed/Packages*
          cp -p ${{ env.ARTIFACT_DIR }}/*.ipk feed
          
          n=0
          until opkg-utils/opkg-make-index -a -f -v --checksum sha256 feed > feed/Packages || [ $n -ge 3 ]; do
          echo "Indexing failed, retrying... ($((++n)))"
          sleep 2
          done
          
          gzip -kf feed/Packages > feed/Packages.gz
          
          file feed/Packages
          file key-build.sec
          
          usign -S -m feed/Packages -s key-build.sec -x feed/Packages.sig
          
          ls -l feed/
          
          generate_tbody() {
            echo "          <tbody>"
            for file in feed/Packages* feed/*.ipk; do
              [ -f "${file}" ] || continue
              fname=$(basename "${file}")
              fsize=$(du -h "${file}" | cut -f1)
              fdate=$(date -r "${file}" +"%Y-%m-%d %a %H:%M:%S UTC")
              echo "                        <tr>"
              echo "                            <td><a href=\"$fname\">$fname</a></td>"
              echo "                            <td>$fsize</td>"
              echo "                            <td>$fdate</td>"
              echo "                        </tr>"
            done
            echo "          </tbody>"
          }
          
          generate_tbody > feed/tbody.tmp
          
          sed -i '/<!-- tbody-anchor -->/,/<!-- end-tbody-anchor -->/ {
            /<!-- tbody-anchor -->/!{
              /<!-- end-tbody-anchor -->/!d
            }
          }' feed/index.html
          sed -i '/<!-- tbody-anchor -->/r feed/tbody.tmp' feed/index.html
          rm -f feed/tbody.tmp

          current_date="${{ env.BUILD_DATE }}"
          sed -i '/<!-- date-anchor -->/,/<!-- end-date-anchor -->/ {
              /<span id="date">/ {
                  s#<span id="date">.*</span>#<span id="date">'"${current_date}"'</span>#
              }
          }' feed/index.html

      - name: Commit and push to feed branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --cached --quiet && echo "No changes" && exit 0
          git commit -m "Update feed: ${{ env.BUILD_DATE }}"
          git push origin HEAD:feed
        working-directory: feed